{"version":3,"file":"helpers.js","sourceRoot":"","sources":["../src/helpers.ts"],"names":[],"mappings":";;AAAA,+BAAgE;AASnD,QAAA,EAAE,GAAG;IAChB,GAAG,EAAE,KAAK,CAAC,OAAkB;IAC7B,GAAG,EAAE,UAAgB,CAAI;QACvB,OAAA,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,IAAI,KAAK,QAAQ;IAAtC,CAAsC;IACxC,GAAG,EAAE,UAAC,CAAU,IAAoB,OAAA,OAAO,CAAC,KAAK,UAAU,EAAvB,CAAuB;IAC3D,GAAG,EAAE,UAAC,CAAU,IAAkB,OAAA,OAAO,CAAC,KAAK,QAAQ,EAArB,CAAqB;IACvD,GAAG,EAAE,UAAC,CAAU,IAAkB,OAAA,OAAO,CAAC,KAAK,QAAQ,EAArB,CAAqB;IACvD,GAAG,EAAE,UAAC,CAAU,IAAqB,OAAA,CAAC,KAAK,KAAK,CAAC,EAAZ,CAAY;IACjD,GAAG,EAAE,UAAC,CAAU,IAAmB,OAAA,OAAO,CAAC,KAAK,SAAS,EAAtB,CAAsB;CAC1D,CAAA;AAED,SAAgB,OAAO,CAAC,MAA4B;IAClD,iBAAS,CAAC,MAAM,EAAE,EAAE,CAAC,CAAA;AACvB,CAAC;AAFD,0BAEC;AAED,SAAgB,cAAc;IACtB,IAAA,4BAAuB,EAApB,SAAoB,CAAA;IAC7B,IAAM,WAAW,GAAG,mBAAW,CAAC,cAAM,OAAA,CAAC,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,EAAF,CAAE,CAAC,EAAV,CAAU,EAAE,EAAE,CAAC,CAAA;IACrD,OAAO,WAAW,CAAA;AACpB,CAAC;AAJD,wCAIC;AAED,2CAA2C;AAC3C,SAAgB,OAAO,CAAI,KAAQ;IACjC,IAAM,OAAO,GAAG,cAAM,CAAM,SAAS,CAAC,CAAA;IACtC,IAAM,IAAI,GAAG,OAAO,CAAC,OAAO,CAAA;IAC5B,OAAO,CAAC,OAAO,GAAG,KAAK,CAAA;IACvB,OAAO,IAAI,CAAA;AACb,CAAC;AALD,0BAKC","sourcesContent":["import { useCallback, useState, useEffect, useRef } from 'react'\nimport { Indexable } from './types'\n\ninterface IsArray {\n  <T>(a: T): a is T & ReadonlyArray<any>\n}\n\ntype PlainObject<T> = Exclude<T & Indexable, Function | ReadonlyArray<any>>\n\nexport const is = {\n  arr: Array.isArray as IsArray,\n  obj: <T extends any>(a: T): a is PlainObject<T> =>\n    !!a && a.constructor.name === 'Object',\n  fun: (a: unknown): a is Function => typeof a === 'function',\n  str: (a: unknown): a is string => typeof a === 'string',\n  num: (a: unknown): a is number => typeof a === 'number',\n  und: (a: unknown): a is undefined => a === void 0,\n  boo: (a: unknown): a is boolean => typeof a === 'boolean',\n}\n\nexport function useOnce(effect: React.EffectCallback) {\n  useEffect(effect, [])\n}\n\nexport function useForceUpdate() {\n  const [, f] = useState(false)\n  const forceUpdate = useCallback(() => f(v => !v), [])\n  return forceUpdate\n}\n\n/** Use a value from the previous render */\nexport function usePrev<T>(value: T): T | undefined {\n  const prevRef = useRef<any>(undefined)\n  const prev = prevRef.current\n  prevRef.current = value\n  return prev\n}\n"]}